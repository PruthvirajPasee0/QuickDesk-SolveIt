-- Create a table for public proles
create table profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,
  role text default 'user'::text,
  constraint username_length check (char_length(username) >= 3)
);

-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security
alter table profiles enable row level security;

create policy "Public proles are viewable by everyone." on profiles for
select using (true);

create policy "Users can insert their own profile." on profiles for
insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles for
update using (auth.uid() = id);

-- This trigger automatically creates a profile entry when a new user signs up.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers
create function public.handle_new_user() returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url, role)
  values (new.id, new.raw_user_meta_data ->> 'full_name', new.raw_user_meta_data ->> 'avatar_url', 'user');
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
after
insert on auth.users for each row execute procedure public.handle_new_user();

-- Create a table for tickets
create table tickets (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now(),
  title text not null,
  description text,
  status text default 'open'::text,
  priority text default 'low'::text,
  category_id bigint references public.categories,
  created_by uuid references public.profiles not null,
  assigned_to uuid references public.profiles
);

-- Set up Row Level Security (RLS) for tickets
alter table tickets enable row level security;

create policy "Users can view their own tickets." on tickets for
select using (auth.uid() = created_by);

create policy "Users can create tickets." on tickets for
insert with check (auth.uid() = created_by);

create policy "Users can update their own tickets." on tickets for
update using (auth.uid() = created_by);

create policy "Agents and admins can view all tickets." on tickets for
select using (
  (
    select role
    from public.profiles
    where id = auth.uid()
  ) = 'agent'::text
  or (
    select role
    from public.profiles
    where id = auth.uid()
  ) = 'admin'::text
);

create policy "Agents and admins can update any ticket." on tickets for
update using (
  (
    select role
    from public.profiles
    where id = auth.uid()
  ) = 'agent'::text
  or (
    select role
    from public.profiles
    where id = auth.uid()
  ) = 'admin'::text
);

-- Create a table for ticket comments
create table ticket_comments (
  id bigint generated by default as identity primary key,
  ticket_id bigint references public.tickets not null,
  user_id uuid references public.profiles not null,
  comment text not null,
  created_at timestamp with time zone default now()
);

-- Set up Row Level Security (RLS) for ticket comments
alter table ticket_comments enable row level security;

create policy "Users can view comments on their tickets." on ticket_comments for
select using (
  exists (
    select 1
    from tickets
    where
      tickets.id = ticket_comments.ticket_id and tickets.created_by = auth.uid()
  )
);

create policy "Users can create comments on their tickets." on ticket_comments for
insert with check (
  exists (
    select 1
    from tickets
    where
      tickets.id = ticket_comments.ticket_id and tickets.created_by = auth.uid()
  )
);

create policy "Agents and admins can view all comments." on ticket_comments for
select using (
  (
    select role
    from public.profiles
    where id = auth.uid()
  ) = 'agent'::text
  or (
    select role
    from public.profiles
    where id = auth.uid()
  ) = 'admin'::text
);

create policy "Agents and admins can create comments on any ticket." on ticket_comments for
insert with check (
  (
    select role
    from public.profiles
    where id = auth.uid()
  ) = 'agent'::text
  or (
    select role
    from public.profiles
    where id = auth.uid()
  ) = 'admin'::text
);

-- Create a table for categories
create table categories (
  id bigint generated by default as identity primary key,
  name text not null unique
);

-- Set up Row Level Security (RLS) for categories
alter table categories enable row level security;

create policy "Categories are viewable by everyone." on categories for
select using (true);

create policy "Admins can manage categories." on categories for all using (
  (
    select role
    from public.profiles
    where id = auth.uid()
  ) = 'admin'::text
);

-- Create user_roles enum
create type user_role as enum ('end_user', 'agent', 'admin');

-- Add role to profiles table
alter table profiles add column role user_role default 'end_user';
